<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Zzq</title>
    <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/</link>
    <description>Recent content in Posts on Zzq</description>
    <image>
      <url>https://zhang-zhiqiang.github.io/zhang-zhiqiang/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 23 Sep 2022 15:28:41 +0800</lastBuildDate><atom:link href="https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序</title>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_sort/</guid>
      <description>排序 冒泡 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  func Bubbling(data []int) ([]int, error) { if len(data) == 0 { return []int{}, nil } length := len(data) var flag bool for i := 0; i &amp;lt; length; i++ { flag = false for j := 0; j &amp;lt; length-i-1; j++ { if data[j] &amp;gt; data[j+1] { data[j], data[j+1] = data[j+1], data[j] flag = true } } if !</description>
    </item>
    
    <item>
      <title>二分查找</title>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_binary_search/</link>
      <pubDate>Fri, 23 Sep 2022 15:18:26 +0800</pubDate>
      
      <guid>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_binary_search/</guid>
      <description>二分
33
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  func search(nums []int, target int) int { l, r := 0, len(nums)-1 for l &amp;lt;= r { mid := l + (r-l)/2 if nums[mid] == target { return mid } if nums[mid] &amp;gt;= nums[l] { if nums[mid] &amp;gt; target &amp;amp;&amp;amp; target &amp;gt;= nums[l] { r = mid - 1 } else { l = mid + 1 } } else { if nums[mid] &amp;lt; target &amp;amp;&amp;amp; target &amp;lt;= nums[r] { l = mid + 1 } else { r = mid - 1 } } } return -1 }   153</description>
    </item>
    
    <item>
      <title>堆</title>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_deap/</link>
      <pubDate>Fri, 23 Sep 2022 15:17:46 +0800</pubDate>
      
      <guid>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/algo_deap/</guid>
      <description>二叉堆 第一个元素在数组中的索引为0的话，父节点和子节点的位置关系如下：  索引为i的左孩子的索引是（2*i+1） 索引为i的右孩子的索引是（2*i+2） 索引为i的父节点的索引是 floor((i-1)/2)  添加操作  先插入到堆的尾部 依次向上调整整个堆的结构（一直到根即可）  删除操作  将删除的元素替换为要删除的元素， 总长度减一 依次向下调整整个堆的结构（一直到堆尾即可）  golang heap
minheap
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import ( &amp;#34;container/heap&amp;#34; ) type IntHeap []int func (h IntHeap) Len() int { return len(h) } func (h IntHeap) Less(i, j int) bool { return h[i] &amp;lt; h[j] } func (h IntHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] } func (h *IntHeap) Push(x interface{}) { *h = append(*h, x.</description>
    </item>
    
    <item>
      <title>docker 基本概念与命令</title>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/docker_command/</link>
      <pubDate>Fri, 23 Sep 2022 15:28:41 +0800</pubDate>
      
      <guid>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/docker_command/</guid>
      <description>Docker 入门
DOCKER 三大概念
 镜像： 类似于虚拟机镜像、可以理解为一个只读的模版 例如： 一个镜像可以只包含一个基本的操作系统环境，里面仅安装了 apache 应用程序， 可以把它成为 apache 镜像，镜像是创建 docker 容器的基础 容器：类似于一个轻量级的沙箱，Docker 利用容器来运行和隔离应用。 容器是从镜像创建的应用程序实例，它可以启动、开始、停止、删除，而这些容器都是相互隔离、互不可见的。（容器是镜像运行实例） 仓库： 类似于代码仓库，是 Docker 集中存放镜像文件的场所。  设置镜像代理 阿里云镜像
images 常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  # 列出本机的所有 image 文件。 # -a 列出所有包括临时文件 $ docker image ls # 查找镜像 $ docker search # 删除 image 文件 # -f 强制删除一个存在容器依赖的镜像，正确的做法应为先删除依赖该镜像的所有容器再删除镜像 $ docker image rm [imageName] # 清理镜像 # -a 删除所有无用的镜像，不光是临时镜像 $ docker image prune # 查看镜像详细信息 $ docker [image] inspect # 下载最新镜像 # imageName 默认从 hub 下载， 可以选择指定 代码仓库地址 $ docker image pull [imageName] $ docker pull hub.</description>
    </item>
    
    <item>
      <title>负载均衡的四种实现方式</title>
      <link>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/gateway-load/</link>
      <pubDate>Fri, 23 Sep 2022 15:23:04 +0800</pubDate>
      
      <guid>https://zhang-zhiqiang.github.io/zhang-zhiqiang/posts/gateway-load/</guid>
      <description>随机 轮询 权重 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  package load_balance import ( &amp;#34;errors&amp;#34; &amp;#34;strconv&amp;#34; ) type WeightRoundRobinBalance struct { curIndex int rss []*WeightNode rsw []int } type WeightNode struct { addr string weight int // 权重 	currentWeight int // 节点当前权重 	effectiveWeight int // 有效权重 } func (r *WeightRoundRobinBalance) Add(params .</description>
    </item>
    
  </channel>
</rss>
